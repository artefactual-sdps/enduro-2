// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/am (interfaces: TransferLocation)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/am/fake/mock_am.go -package=fake github.com/artefactual-sdps/enduro/internal/am TransferLocation
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	reflect "reflect"

	async "github.com/artefactual-sdps/enduro/internal/async"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferLocation is a mock of TransferLocation interface.
type MockTransferLocation struct {
	ctrl     *gomock.Controller
	recorder *MockTransferLocationMockRecorder
}

// MockTransferLocationMockRecorder is the mock recorder for MockTransferLocation.
type MockTransferLocationMockRecorder struct {
	mock *MockTransferLocation
}

// NewMockTransferLocation creates a new mock instance.
func NewMockTransferLocation(ctrl *gomock.Controller) *MockTransferLocation {
	mock := &MockTransferLocation{ctrl: ctrl}
	mock.recorder = &MockTransferLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferLocation) EXPECT() *MockTransferLocationMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTransferLocation) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransferLocationMockRecorder) Delete(arg0, arg1 any) *MockTransferLocationDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransferLocation)(nil).Delete), arg0, arg1)
	return &MockTransferLocationDeleteCall{Call: call}
}

// MockTransferLocationDeleteCall wrap *gomock.Call
type MockTransferLocationDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferLocationDeleteCall) Return(arg0 error) *MockTransferLocationDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferLocationDeleteCall) Do(f func(context.Context, string) error) *MockTransferLocationDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferLocationDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockTransferLocationDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upload mocks base method.
func (m *MockTransferLocation) Upload(arg0 context.Context, arg1 io.Reader, arg2 string) (string, async.Upload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(async.Upload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Upload indicates an expected call of Upload.
func (mr *MockTransferLocationMockRecorder) Upload(arg0, arg1, arg2 any) *MockTransferLocationUploadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockTransferLocation)(nil).Upload), arg0, arg1, arg2)
	return &MockTransferLocationUploadCall{Call: call}
}

// MockTransferLocationUploadCall wrap *gomock.Call
type MockTransferLocationUploadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferLocationUploadCall) Return(arg0 string, arg1 async.Upload, arg2 error) *MockTransferLocationUploadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferLocationUploadCall) Do(f func(context.Context, io.Reader, string) (string, async.Upload, error)) *MockTransferLocationUploadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferLocationUploadCall) DoAndReturn(f func(context.Context, io.Reader, string) (string, async.Upload, error)) *MockTransferLocationUploadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
