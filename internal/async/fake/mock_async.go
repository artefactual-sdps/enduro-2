// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/enduro/internal/async (interfaces: Upload)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/async/fake/mock_async.go -package=fake github.com/artefactual-sdps/enduro/internal/async Upload
//

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUpload is a mock of Upload interface.
type MockUpload struct {
	ctrl     *gomock.Controller
	recorder *MockUploadMockRecorder
}

// MockUploadMockRecorder is the mock recorder for MockUpload.
type MockUploadMockRecorder struct {
	mock *MockUpload
}

// NewMockUpload creates a new mock instance.
func NewMockUpload(ctrl *gomock.Controller) *MockUpload {
	mock := &MockUpload{ctrl: ctrl}
	mock.recorder = &MockUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpload) EXPECT() *MockUploadMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockUpload) Bytes() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockUploadMockRecorder) Bytes() *MockUploadBytesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockUpload)(nil).Bytes))
	return &MockUploadBytesCall{Call: call}
}

// MockUploadBytesCall wrap *gomock.Call
type MockUploadBytesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUploadBytesCall) Return(arg0 int64) *MockUploadBytesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUploadBytesCall) Do(f func() int64) *MockUploadBytesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUploadBytesCall) DoAndReturn(f func() int64) *MockUploadBytesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockUpload) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUploadMockRecorder) Close() *MockUploadCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUpload)(nil).Close))
	return &MockUploadCloseCall{Call: call}
}

// MockUploadCloseCall wrap *gomock.Call
type MockUploadCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUploadCloseCall) Return(arg0 error) *MockUploadCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUploadCloseCall) Do(f func() error) *MockUploadCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUploadCloseCall) DoAndReturn(f func() error) *MockUploadCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockUpload) Done() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockUploadMockRecorder) Done() *MockUploadDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockUpload)(nil).Done))
	return &MockUploadDoneCall{Call: call}
}

// MockUploadDoneCall wrap *gomock.Call
type MockUploadDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUploadDoneCall) Return(arg0 chan bool) *MockUploadDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUploadDoneCall) Do(f func() chan bool) *MockUploadDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUploadDoneCall) DoAndReturn(f func() chan bool) *MockUploadDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockUpload) Err() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockUploadMockRecorder) Err() *MockUploadErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockUpload)(nil).Err))
	return &MockUploadErrCall{Call: call}
}

// MockUploadErrCall wrap *gomock.Call
type MockUploadErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUploadErrCall) Return(arg0 chan error) *MockUploadErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUploadErrCall) Do(f func() chan error) *MockUploadErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUploadErrCall) DoAndReturn(f func() chan error) *MockUploadErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockUpload) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockUploadMockRecorder) Write(arg0 any) *MockUploadWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUpload)(nil).Write), arg0)
	return &MockUploadWriteCall{Call: call}
}

// MockUploadWriteCall wrap *gomock.Call
type MockUploadWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUploadWriteCall) Return(arg0 int, arg1 error) *MockUploadWriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUploadWriteCall) Do(f func([]byte) (int, error)) *MockUploadWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUploadWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockUploadWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
